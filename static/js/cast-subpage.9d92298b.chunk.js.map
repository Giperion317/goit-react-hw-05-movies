{"version":3,"file":"static/js/cast-subpage.9d92298b.chunk.js","mappings":"uQAEaA,EAAWC,EAAAA,GAAAA,EAAH,sGAIV,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,OAAOC,KAAvB,IAGHC,EAAWL,EAAAA,GAAAA,GAAH,gGAMRM,EAAWN,EAAAA,GAAAA,GAAH,8MAQRO,EAAWP,EAAAA,GAAAA,EAAH,2DAEV,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,OAAOK,OAAvB,IAGHC,EAAcT,EAAAA,GAAAA,KAAH,gFAGb,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,OAAOO,MAAvB,I,SCchB,EAvCa,WACX,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAeR,OAbAE,EAAAA,EAAAA,YAAU,WACRH,GAAa,IACbI,EAAAA,EAAAA,IAAeH,GACZI,MAAK,YAAe,IAAZR,EAAW,EAAXA,KACFA,EAAKS,QACVR,EAAQD,EACT,IACAU,OAAM,SAAAC,GACLC,QAAQC,IAAIF,EAAMG,QACnB,IAAEC,SAAQ,WACTZ,GAAa,EACd,GACJ,GAAE,CAACC,KAEF,gCACGF,IAAa,SAACc,EAAA,EAAD,IACZd,GAA6B,IAAhBF,EAAKS,QAGjB,SAAChB,EAAD,UACFO,EAAKiB,KAAI,gBAAEC,EAAF,EAAEA,UAAWC,EAAb,EAAaA,KAAMC,EAAnB,EAAmBA,aAAcC,EAAjC,EAAiCA,GAAjC,OACJ,UAAC3B,EAAD,YACI,gBAAK4B,IAAK,sCAAwCF,EAAcG,IAAKJ,EAAMK,MAAM,SACjF,SAAC7B,EAAD,UAAWwB,KACX,wCAAc,SAACtB,EAAD,UAAcqB,SAHjBG,EADX,OAHR,SAAClC,EAAD,mDAeP,C,mMCzCKsC,EAAU,mCAGT,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,qGACkBC,EAAAA,EAAAA,GAAM,qBAAsB,CACjDC,OAAQ,CACNC,QAASJ,KAHR,cACCK,EADD,yBAMEA,EAASC,KAAKC,SANhB,kEASA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAkCZ,GAAlC,wFACkBM,EAAAA,EAAAA,GAAM,UAAD,OAAWN,GAAM,CAC3CO,OAAQ,CACNC,QAASJ,EACTS,mBAAoB,YAJnB,cACCJ,EADD,yBAOEA,EAASC,MAPX,kEAUA,SAAexB,EAAtB,+CAAO,OAAP,oBAAO,WAA8Bc,GAA9B,wFACkBM,EAAAA,EAAAA,GAAM,UAAD,OAAWN,EAAX,YAAyB,CACnDO,OAAQ,CACNC,QAASJ,KAHR,cACCK,EADD,yBAMEA,EAASC,MANX,kEASA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAAiCd,GAAjC,wFACkBM,EAAAA,EAAAA,GAAM,UAAD,OAAWN,EAAX,YAAyB,CACnDO,OAAQ,CACNC,QAASJ,KAHR,cACCK,EADD,yBAMEA,EAASC,MANX,kEASA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAAiCC,GAAjC,wFACkBV,EAAAA,EAAAA,GAAM,gBAAiB,CAC5CC,OAAQ,CACNC,QAASJ,EACTY,MAAAA,KAJC,cACCP,EADD,yBAOEA,EAASC,KAAKC,SAPhB,kEAvCPL,EAAAA,EAAAA,SAAAA,QAAyB,+B","sources":["pages/Cast/Cast.styled.js","pages/Cast/Cast.jsx","services/moviesApi.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const NoneText = styled.p`\n  text-align: center;\n  font-size: 18px;\n  padding: 20px 0;\n  color: ${props => props.theme.colors.black};\n`;\n\nexport const CastList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n`;\n\nexport const CastItem = styled.li`\n  width: 100px;\n  margin-bottom: 20px;\n  box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.12), 0px 1px 1px rgba(0, 0, 0, 0.14),\n    0px 2px 1px rgba(0, 0, 0, 0.2);\n  border-radius: 4px;\n`;\n\nexport const CastName = styled.b`\n  font-size: 16px;\n  color: ${props => props.theme.colors.primory};\n`;\n\nexport const CharterName = styled.span`\n  font-size: 16px;\n  font-weight: 500;\n  color: ${props => props.theme.colors.accent};\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieCast } from \"services/moviesApi\";\nimport { Loader } from 'components/Loader/Loader';\nimport { NoneText, CastList, CastItem, CastName, CharterName } from './Cast.styled';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setIsLoading(true);\n    fetchMovieCast(movieId)\n      .then(({ cast }) => {\n        if (!cast.length) return;\n        setCast(cast);\n      })\n      .catch(error => {\n        console.log(error.message);\n      }).finally(() => {\n        setIsLoading(false);\n      });\n  }, [movieId]);\n  return (\n    <>\n      {isLoading && <Loader />}\n      {!isLoading && cast.length === 0 ? (\n        <NoneText>We don't have cast for this movie!</NoneText>\n      ) : (\n         <CastList>\n      {cast.map(({character, name, profile_path, id}) => (\n            <CastItem key={id}>\n                <img src={'https://image.tmdb.org/t/p/original' + profile_path} alt={name} width='100' />\n                <CastName>{name}</CastName>\n                <p>Character: <CharterName>{character}</CharterName></p>\n            </CastItem>\n        ))}\n    </CastList>\n      )}\n    </>\n       \n    )\n}\n\nexport default Cast;","import axios from 'axios';\n\nconst API_KEY = 'abb31a7bed98d036dc34aaa5b39687ea';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport async function fetchMovies() {\n  const response = await axios('trending/movie/day', {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data.results;\n}\n\nexport async function fetchMovieFullInfo(id) {\n  const response = await axios(`/movie/${id}`, {\n    params: {\n      api_key: API_KEY,\n      append_to_response: 'videos',\n    },\n  });\n  return response.data;\n}\n\nexport async function fetchMovieCast(id) {\n  const response = await axios(`/movie/${id}/credits`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data;\n}\n\nexport async function fetchMovieReviews(id) {\n  const response = await axios(`/movie/${id}/reviews`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data;\n}\n\nexport async function fetchMoviesSearch(query) {\n  const response = await axios('/search/movie', {\n    params: {\n      api_key: API_KEY,\n      query,\n    },\n  });\n  return response.data.results;\n}\n"],"names":["NoneText","styled","props","theme","colors","black","CastList","CastItem","CastName","primory","CharterName","accent","useState","cast","setCast","isLoading","setIsLoading","movieId","useParams","useEffect","fetchMovieCast","then","length","catch","error","console","log","message","finally","Loader","map","character","name","profile_path","id","src","alt","width","API_KEY","fetchMovies","axios","params","api_key","response","data","results","fetchMovieFullInfo","append_to_response","fetchMovieReviews","fetchMoviesSearch","query"],"sourceRoot":""}