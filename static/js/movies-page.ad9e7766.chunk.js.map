{"version":3,"file":"static/js/movies-page.ad9e7766.chunk.js","mappings":"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","sources":["components/Movies/Modies.styled.js","components/Movies/Movies.jsx","components/SearchForm/SearchForm.jsx","pages/MoviesPage/MoviesPage.jsx","services/moviesApi.js"],"sourcesContent":["import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const MoviesList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n`;\n\nexport const MoviesItem = styled.li`\n  width: 270px;\n  margin-bottom: 20px;\n  box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.12), 0px 1px 1px rgba(0, 0, 0, 0.14),\n    0px 2px 1px rgba(0, 0, 0, 0.2);\n  border-radius: 4px;\n  transition: transform 500ms cubic-bezier(0.4, 0, 0.2, 1),\n    box-shadow 500ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover {\n    transform: scale(1.05);\n    box-shadow: 8px 12px 14px 2px rgba(71, 71, 71, 0.6);\n  }\n`;\n\nexport const MoviesLink = styled(Link)`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  width: 100%;\n`;\n\nexport const Wrapper = styled.div`\n  flex-grow: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  padding: 5px;\n  background-color: #e4e7e7;\n`;\n\nexport const MoviesTitle = styled.h2`\n  font-size: 24px;\n  font-weight: 500;\n  color: ${props => props.theme.colors.primory};\n`;\n","import { useLocation } from 'react-router-dom';\nimport { MoviesItem, MoviesList, MoviesLink, Wrapper, MoviesTitle} from './Modies.styled';\nimport PropTypes from 'prop-types';\n\n\nexport const Movies = ({ movies }) => {\n  const location = useLocation();\n  console.log(movies);\n  return (\n    <MoviesList>\n      {movies &&\n        movies.map(({ original_title, id, poster_path}) => (\n          <MoviesItem key={id}>\n            <MoviesLink to={`/movies/${id}`} state={{ from: location }}>\n              <img\n                src={'https://image.tmdb.org/t/p/original' + poster_path}\n                alt={original_title}\n                width=\"270\"\n              />\n              <Wrapper>\n              <MoviesTitle>{original_title}</MoviesTitle>\n                </Wrapper>\n            </MoviesLink>\n          </MoviesItem>\n        ))}\n    </MoviesList>\n  );\n};\n\nMovies.propTypes = {\n  movies: PropTypes.array.isRequired,\n};\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const SearchForm = ({ onSubmit }) => {\n  const [serchQuery, setSerchQuery] = useState('');\n\n  const handleChange = ({ target: { value } }) => {\n    setSerchQuery(value.toLowerCase());\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (serchQuery.trim() === '') {\n      return alert('Please enter name movie');\n    }\n    onSubmit(serchQuery);\n    reset();\n  };\n\n  const reset = () => {\n    setSerchQuery('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <button type=\"submit\">Search</button>\n      <input\n        type=\"text\"\n        autoComplete=\"off\"\n        autoFocus\n        placeholder=\"Search movie name\"\n        onChange={handleChange}\n        name=\"serchQuery\"\n        value={serchQuery}\n      />\n    </form>\n  );\n};\n\nSearchForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { fetchMoviesSearch } from 'services/moviesApi';\nimport { SearchForm } from 'components/SearchForm/SearchForm';\nimport { Movies } from 'components/Movies/Movies';\nimport { Loader } from 'components/Loader/Loader';\n\nconst MoviesPage = () => {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query');\n\n  useEffect(() => {\n    if (!query) return;\n    setIsLoading(true);\n    fetchMoviesSearch(query).then((data) => {\n      if (!data.length) {\n          alert('Something went wrong, try again!');\n        }\n      setMovies(data)\n    }).catch(error => {\n        console.log(error.message);\n    })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, [query]);\n\n  const serchQuery = serchQuery => {\n    setSearchParams({ query: serchQuery });\n  };\n  return (\n    <>\n      <SearchForm onSubmit={serchQuery} />\n      {isLoading && <Loader />}\n      {!isLoading && movies && <Movies movies={movies} />}\n    </>\n  );\n};\n\nexport default MoviesPage;","import axios from 'axios';\n\nconst API_KEY = 'abb31a7bed98d036dc34aaa5b39687ea';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport async function fetchMovies() {\n  const response = await axios('trending/movie/day', {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data.results;\n}\n\nexport async function fetchMovieFullInfo(id) {\n  const response = await axios(`/movie/${id}`, {\n    params: {\n      api_key: API_KEY,\n      append_to_response: 'videos',\n    },\n  });\n  return response.data;\n}\n\nexport async function fetchMovieCast(id) {\n  const response = await axios(`/movie/${id}/credits`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data;\n}\n\nexport async function fetchMovieReviews(id) {\n  const response = await axios(`/movie/${id}/reviews`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data;\n}\n\nexport async function fetchMoviesSearch(query) {\n  const response = await axios('/search/movie', {\n    params: {\n      api_key: API_KEY,\n      query,\n    },\n  });\n  return response.data.results;\n}\n"],"names":["MoviesList","styled","MoviesItem","MoviesLink","Link","Wrapper","MoviesTitle","props","theme","colors","primory","Movies","movies","location","useLocation","console","log","map","original_title","id","poster_path","to","state","from","src","alt","width","SearchForm","onSubmit","useState","serchQuery","setSerchQuery","reset","event","preventDefault","trim","alert","type","autoComplete","autoFocus","placeholder","onChange","value","target","toLowerCase","name","setMovies","isLoading","setIsLoading","useSearchParams","searchParams","setSearchParams","query","get","useEffect","fetchMoviesSearch","then","data","length","catch","error","message","finally","Loader","API_KEY","fetchMovies","axios","params","api_key","response","results","fetchMovieFullInfo","append_to_response","fetchMovieCast","fetchMovieReviews"],"sourceRoot":""}