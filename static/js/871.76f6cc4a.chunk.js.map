{"version":3,"file":"static/js/871.76f6cc4a.chunk.js","mappings":"uMA2CA,UAtCgB,WACd,OAA8BA,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAgBR,OAdAE,EAAAA,EAAAA,YAAU,WACRH,GAAa,IACbI,EAAAA,EAAAA,IAAkBH,GACfI,MAAK,YAAkB,IAAfC,EAAc,EAAdA,QACFA,EAAQC,QACbT,EAAWQ,EACZ,IACAE,OAAM,SAAAC,GACLC,QAAQC,IAAIF,EAAMG,QACnB,IACAC,SAAQ,WACPb,GAAa,EACd,GACJ,GAAE,CAACC,KAEF,gCACGF,IAAa,SAAC,IAAD,IACZA,GAAgC,IAAnBF,EAAQU,QAGrB,wBACGV,EAAQiB,KAAI,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAASC,EAApB,EAAoBA,GAApB,OACX,2BACE,mCAAWF,MACX,uBAAIC,MAFGC,EADE,OAHf,uEAaP,C,+LCvCKC,EAAU,mCAGT,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,qGACkBC,EAAAA,EAAAA,GAAM,qBAAsB,CACjDC,OAAQ,CACNC,QAASJ,KAHR,cACCK,EADD,yBAMEA,EAASC,KAAKlB,SANhB,kEASA,SAAemB,EAAtB,+CAAO,OAAP,oBAAO,WAAkCR,GAAlC,wFACkBG,EAAAA,EAAAA,GAAM,UAAD,OAAWH,GAAM,CAC3CI,OAAQ,CACNC,QAASJ,EACTQ,mBAAoB,YAJnB,cACCH,EADD,yBAOEA,EAASC,MAPX,kEAUA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA8BV,GAA9B,wFACkBG,EAAAA,EAAAA,GAAM,UAAD,OAAWH,EAAX,YAAyB,CACnDI,OAAQ,CACNC,QAASJ,KAHR,cACCK,EADD,yBAMEA,EAASC,MANX,kEASA,SAAepB,EAAtB,+CAAO,OAAP,oBAAO,WAAiCa,GAAjC,wFACkBG,EAAAA,EAAAA,GAAM,UAAD,OAAWH,EAAX,YAAyB,CACnDI,OAAQ,CACNC,QAASJ,KAHR,cACCK,EADD,yBAMEA,EAASC,MANX,kEASA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAAiCC,GAAjC,wFACkBT,EAAAA,EAAAA,GAAM,gBAAiB,CAC5CC,OAAQ,CACNC,QAASJ,EACTW,MAAAA,KAJC,cACCN,EADD,yBAOEA,EAASC,KAAKlB,SAPhB,kEAvCPc,EAAAA,EAAAA,SAAAA,QAAyB,+B","sources":["pages/Reviews/Reviews.jsx","services/moviesApi.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieReviews } from 'services/moviesApi';\nimport { Loader } from 'components/Loader/Loader';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setIsLoading(true);\n    fetchMovieReviews(movieId)\n      .then(({ results }) => {\n        if (!results.length) return;\n        setReviews(results);\n      })\n      .catch(error => {\n        console.log(error.message);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, [movieId]);\n  return (\n    <>\n      {isLoading && <Loader />}\n      {!isLoading && reviews.length === 0 ? (\n        <p>We don't have any reviews for this movie.</p>\n      ) : (\n        <ul>\n          {reviews.map(({ author, content, id }) => (\n            <li key={id}>\n              <b>Autor: {author}</b>\n              <p>{content}</p>\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nconst API_KEY = 'abb31a7bed98d036dc34aaa5b39687ea';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport async function fetchMovies() {\n  const response = await axios('trending/movie/day', {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data.results;\n}\n\nexport async function fetchMovieFullInfo(id) {\n  const response = await axios(`/movie/${id}`, {\n    params: {\n      api_key: API_KEY,\n      append_to_response: 'videos',\n    },\n  });\n  return response.data;\n}\n\nexport async function fetchMovieCast(id) {\n  const response = await axios(`/movie/${id}/credits`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data;\n}\n\nexport async function fetchMovieReviews(id) {\n  const response = await axios(`/movie/${id}/reviews`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data;\n}\n\nexport async function fetchMoviesSearch(query) {\n  const response = await axios('/search/movie', {\n    params: {\n      api_key: API_KEY,\n      query,\n    },\n  });\n  return response.data.results;\n}\n"],"names":["useState","reviews","setReviews","isLoading","setIsLoading","movieId","useParams","useEffect","fetchMovieReviews","then","results","length","catch","error","console","log","message","finally","map","author","content","id","API_KEY","fetchMovies","axios","params","api_key","response","data","fetchMovieFullInfo","append_to_response","fetchMovieCast","fetchMoviesSearch","query"],"sourceRoot":""}