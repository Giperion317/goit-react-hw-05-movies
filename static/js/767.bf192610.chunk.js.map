{"version":3,"file":"static/js/767.bf192610.chunk.js","mappings":"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","sources":["components/Movies/Movies.jsx","components/SearchForm/SearchForm.jsx","pages/MoviesPage.jsx","services/moviesApi.js"],"sourcesContent":["import { Link, useLocation } from \"react-router-dom\";\nimport PropTypes from 'prop-types';\n\nexport const Movies = ({ movies }) => {\n  const location = useLocation()\n  return (\n    <ul>\n      {movies &&\n        movies.map(({original_title, id}) => (\n            <li key={id}>\n               <Link to={`/movies/${id}`} state={{from:location}}>{original_title}</Link>\n            </li>\n        ))}\n    </ul>\n  );\n};\n\nMovies.propTypes = {\n  movies: PropTypes.array.isRequired,\n};","import { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const SearchForm = ({ onSubmit }) => {\n  const [serchQuery, setSerchQuery] = useState('');\n\n  const handleChange = ({ target: { value } }) => {\n    setSerchQuery(value.toLowerCase());\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (serchQuery.trim() === '') {\n      return alert('Please enter name movie');\n    }\n    onSubmit(serchQuery);\n    reset();\n  };\n\n  const reset = () => {\n    setSerchQuery('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <button type=\"submit\">Search</button>\n      <input\n        type=\"text\"\n        autoComplete=\"off\"\n        autoFocus\n        placeholder=\"Search movie name\"\n        onChange={handleChange}\n        name=\"serchQuery\"\n        value={serchQuery}\n      />\n    </form>\n  );\n};\n\nSearchForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { fetchMoviesSearch } from 'services/moviesApi';\nimport { SearchForm } from 'components/SearchForm/SearchForm';\nimport { Movies } from 'components/Movies/Movies';\nimport { Loader } from 'components/Loader/Loader';\n\nconst MoviesPage = () => {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query');\n\n  useEffect(() => {\n    if (!query) return;\n    setIsLoading(true);\n    fetchMoviesSearch(query).then((data) => {\n      if (!data.length) {\n          alert('Something went wrong, try again!');\n        }\n      setMovies(data)\n    }).catch(error => {\n        console.log(error.message);\n    })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, [query]);\n\n  const serchQuery = serchQuery => {\n    setSearchParams({ query: serchQuery });\n  };\n  return (\n    <section>\n      <SearchForm onSubmit={serchQuery} />\n      {isLoading && <Loader />}\n      {!isLoading && movies && <Movies movies={movies} />}\n    </section>\n  );\n};\n\nexport default MoviesPage;","import axios from 'axios';\n\nconst API_KEY = 'abb31a7bed98d036dc34aaa5b39687ea';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport async function fetchMovies() {\n  const response = await axios('trending/movie/day', {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data.results;\n}\n\nexport async function fetchMovieFullInfo(id) {\n  const response = await axios(`/movie/${id}`, {\n    params: {\n      api_key: API_KEY,\n      append_to_response: 'videos',\n    },\n  });\n  return response.data;\n}\n\nexport async function fetchMovieCast(id) {\n  const response = await axios(`/movie/${id}/credits`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data;\n}\n\nexport async function fetchMovieReviews(id) {\n  const response = await axios(`/movie/${id}/reviews`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data;\n}\n\nexport async function fetchMoviesSearch(query) {\n  const response = await axios('/search/movie', {\n    params: {\n      api_key: API_KEY,\n      query,\n    },\n  });\n  return response.data.results;\n}\n"],"names":["Movies","movies","location","useLocation","map","original_title","id","to","state","from","SearchForm","onSubmit","useState","serchQuery","setSerchQuery","reset","event","preventDefault","trim","alert","type","autoComplete","autoFocus","placeholder","onChange","value","target","toLowerCase","name","setMovies","isLoading","setIsLoading","useSearchParams","searchParams","setSearchParams","query","get","useEffect","fetchMoviesSearch","then","data","length","catch","error","console","log","message","finally","Loader","API_KEY","fetchMovies","axios","params","api_key","response","results","fetchMovieFullInfo","append_to_response","fetchMovieCast","fetchMovieReviews"],"sourceRoot":""}